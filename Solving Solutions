class Candidates:
    def __init__(self):
        self.cells = [False for x in range(9)]
    
    def print_candidates(self):
        print(self.cells)

    def set_position(self, pos, flag):
        self.cells[pos] = flag

    def solve(self, pos):
        self.cells = [False for x in range(9)]
        self.cells[pos] = True

class Board:
    def __init__(self):
        self.board = [[Candidates() for x in range(9)] for y in range(9)]

    def print_board(self):
        for row in self.board:
            print("")
            for candidate in row:
                print(candidate.cells, end=' ')  # Print the candidates list for each cell
            print()  # Ensure each row of cells starts on a new line

    def check_row(self, row, num):
        for candidate in self.board[row]:
            if candidate.cells[num]:
                return False
        return True

    def check_col(self, col, num):
        for row in self.board:
            if row[col].cells[num]:
                return False
        return True

    def check_box(self, num, row, col):
        firstRow = 3 * (row // 3)
        firstCol = 3 * (col // 3)

        for i in range(firstRow, firstRow + 3):
            for j in range(firstCol, firstCol + 3):
                if self.board[i][j].cells[num]:
                    return False
        return True   
    
    def check_board(self, row, col, num):
        return (self.check_row(row, num) and
            self.check_col(col, num) and
            self.check_box(num, row // 3, col // 3))
    
    def set_board(self, row, col, num):
        if self.check_board(row, col, num):
            self.board[row][col].solve(num)


candidate = Candidates()
candidate.print_candidates()

candidate.set_position(2, False)
candidate.print_candidates()

candidate.solve(4)
candidate.print_candidates()

board = Board()

board.board[0][0].set_position(5 - 1, True)

board.board[0][1].set_position(3 - 1, True)

board.board[0][4].set_position(7 - 1, True)

board.board[1][0].set_position(6 - 1, True)

board.board[1][3].set_position(1 - 1, True)

board.board[1][4].set_position(9 - 1, True)

board.board[1][5].set_position(5 - 1, True)

board.board[2][1].set_position(9 - 1, True)

board.board[2][2].set_position(8 - 1, True)

board.board[2][7].set_position(6 - 1, True)

board.board[3][0].set_position(8 - 1, True)

board.board[3][4].set_position(6 - 1, True)

board.board[3][8].set_position(3 - 1, True)

board.board[4][0].set_position(4 - 1, True)

board.board[4][3].set_position(8 - 1, True)

board.board[4][5].set_position(3 - 1, True)

board.board[4][8].set_position(1 - 1, True)

board.board[5][0].set_position(7 - 1, True)

board.board[5][4].set_position(2 - 1, True)

board.board[5][8].set_position(6 - 1, True)

board.board[6][1].set_position(6 - 1, True)

board.board[6][6].set_position(2 - 1, True)

board.board[6][7].set_position(8 - 1, True)

board.board[7][3].set_position(4 - 1, True)

board.board[7][4].set_position(1 - 1, True)

board.board[7][5].set_position(9 - 1, True)

board.board[7][8].set_position(5 - 1, True)

board.board[8][4].set_position(8 - 1, True)

board.board[8][7].set_position(7 - 1, True)

board.board[8][8].set_position(9 - 1, True)
board.print_board()
